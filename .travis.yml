# before_script:
#   - "export DISPLAY=:99.0"
#   - "sh -e /etc/init.d/xvfb start"
#   - sleep 5 # give xvfb some time to start

language: python
matrix:
  include:
    - python: 3.5  # we don't actually use this
      env: PYTHON_VERSION=3.7

before_install:
  # Ensure that ffmpeg is installed
  # Inspired from here: https://gist.github.com/kevinGodell/bd52cd74c8c2d66fb69f108ef223c356
  # However, I also changed the PPA based on this URL: https://tecadmin.net/install-ffmpeg-on-linux/
  # - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:jonathonf/ffmpeg-3; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -y ffmpeg; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install ffmpeg; fi

install:
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda config --add channels conda-forge
  - conda install -c conda-forge mamba

  # Useful for debugging any issues with conda
  - conda info -a  # show information about environment

  # Install Python, py.test, and required packages.
  - mamba env create -f environment.yml
  - source activate nams
  # This guarantees that Python version is matrixed.
  - mamba install python=$PYTHON_VERSION
  - python -m ipykernel install --user --name nams
  # Finally, ensure that the custom package is installed.
  - pip install -e .
  # Show packages in environment, for debugging purposes
  - conda list

script:
  # Build LeanPub files
  - jupyter nbconvert --to python scripts/bookbuilder/markua.ipynb
  - python scripts/bookbuilder/markua.py

  # Build official website
  - mkdocs build

  # Build directory for JupyterCon
  - bash scripts/jupytercon/compile_notebooks.sh

deploy:
  # Publish the LeanPub files
  - provider: pages
    skip_cleanup: true
    github_token: $GITHUB_TOKEN  # Set in the settings page of your repository, as a secure variable
    keep_history: false
    on:
      branch: master
    target_branch: leanpub

  # Publish the official website
  - provider: pages
    skip_cleanup: true
    github_token: $GITHUB_TOKEN  # Set in the settings page of your repository, as a secure variable
    keep_history: false
    on:
      branch: master
    local_dir: site/
    target_branch: gh-pages

  # Auto-publish to JupyterCon's created repo
  # Take this down once JupyterCon is over.
  - provider: pages
    skip_cleanup: false
    github_token: $GITHUB_TOKEN
    keep_history: false
    local_dir: /tmp/jupytercon
    repo: jupytercon/2020-ericmjl
    on:
      branch: master
    target_branch: master
    committer_from_gh: true

after_success:
  - bash <(curl -s https://codecov.io/bash)

notifications:
  email: true
